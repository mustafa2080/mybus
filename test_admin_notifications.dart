import 'package:flutter/material.dart';
import 'lib/services/admin_notification_service.dart';
import 'lib/models/admin_notification_model.dart';

/// ุงุฎุชุจุงุฑ ูุธุงู ุฅุดุนุงุฑุงุช ุงูุฃุฏูู
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  print('๐งช ุจุฏุก ุงุฎุชุจุงุฑ ูุธุงู ุฅุดุนุงุฑุงุช ุงูุฃุฏูู...');
  
  final adminNotificationService = AdminNotificationService();
  
  try {
    // ุงุฎุชุจุงุฑ ุฅูุดุงุก ุฅุดุนุงุฑุงุช ุชุฌุฑูุจูุฉ
    await _testCreateNotifications(adminNotificationService);
    
    // ุงุฎุชุจุงุฑ ุงูุญูุธ ูุงูุชุญููู
    await _testSaveAndLoad(adminNotificationService);
    
    // ุงุฎุชุจุงุฑ ุงูุนูููุงุช
    await _testOperations(adminNotificationService);
    
    print('โ ุชู ุงุฌุชูุงุฒ ุฌููุน ุงุฎุชุจุงุฑุงุช ูุธุงู ุฅุดุนุงุฑุงุช ุงูุฃุฏูู!');
    
  } catch (e) {
    print('โ ูุดู ูู ุงุฎุชุจุงุฑ ูุธุงู ุฅุดุนุงุฑุงุช ุงูุฃุฏูู: $e');
  }
}

/// ุงุฎุชุจุงุฑ ุฅูุดุงุก ุฅุดุนุงุฑุงุช ุชุฌุฑูุจูุฉ
Future<void> _testCreateNotifications(AdminNotificationService service) async {
  print('๐ ุงุฎุชุจุงุฑ ุฅูุดุงุก ุงูุฅุดุนุงุฑุงุช...');
  
  // ุฅุดุนุงุฑ ุนุงุฏู
  final normalNotification = AdminNotificationModel(
    id: '1',
    title: 'ุฅุดุนุงุฑ ุชุฌุฑูุจู ุนุงุฏู',
    body: 'ูุฐุง ุฅุดุนุงุฑ ุชุฌุฑูุจู ููุงุฎุชุจุงุฑ',
    data: {'type': 'test', 'source': 'unit_test'},
    timestamp: DateTime.now(),
    isRead: false,
    type: 'general',
    priority: NotificationPriority.normal,
  );
  
  // ุฅุดุนุงุฑ ุนุงุฌู
  final urgentNotification = AdminNotificationModel(
    id: '2',
    title: 'ุฅุดุนุงุฑ ุทูุงุฑุฆ',
    body: 'ูุฐุง ุฅุดุนุงุฑ ุทูุงุฑุฆ ูุชุทูุจ ุงูุชุจุงู ููุฑู',
    data: {'type': 'emergency', 'source': 'unit_test'},
    timestamp: DateTime.now(),
    isRead: false,
    type: 'emergency',
    priority: NotificationPriority.urgent,
  );
  
  // ุฅุดุนุงุฑ ุทุงูุจ
  final studentNotification = AdminNotificationModel(
    id: '3',
    title: 'ุฅุดุนุงุฑ ุทุงูุจ ุฌุฏูุฏ',
    body: 'ุชู ุชุณุฌูู ุทุงูุจ ุฌุฏูุฏ ูู ุงููุธุงู',
    data: {'type': 'student', 'studentId': 'student_123'},
    timestamp: DateTime.now().subtract(const Duration(minutes: 30)),
    isRead: false,
    type: 'student',
    priority: NotificationPriority.high,
  );
  
  print('โ ุชู ุฅูุดุงุก ${[normalNotification, urgentNotification, studentNotification].length} ุฅุดุนุงุฑุงุช ุชุฌุฑูุจูุฉ');
  
  // ุงุฎุชุจุงุฑ ุงูุฎุตุงุฆุต
  print('๐ ุงุฎุชุจุงุฑ ุฎุตุงุฆุต ุงูุฅุดุนุงุฑุงุช:');
  print('   - ุงูุฅุดุนุงุฑ ุงูุนุงุฏู: ${normalNotification.priorityText} (${normalNotification.priorityColor})');
  print('   - ุงูุฅุดุนุงุฑ ุงูุนุงุฌู: ${urgentNotification.priorityText} (${urgentNotification.priorityColor})');
  print('   - ุฅุดุนุงุฑ ุงูุทุงูุจ: ${studentNotification.typeDescription} ${studentNotification.typeIcon}');
  print('   - ุงูููุช ุงูููุณู: ${studentNotification.formattedTime}');
  print('   - ูู ุฌุฏูุฏุ ${normalNotification.isNew}');
}

/// ุงุฎุชุจุงุฑ ุงูุญูุธ ูุงูุชุญููู
Future<void> _testSaveAndLoad(AdminNotificationService service) async {
  print('๐พ ุงุฎุชุจุงุฑ ุงูุญูุธ ูุงูุชุญููู...');
  
  // ูุญุงูุงุฉ ุญูุธ ุฅุดุนุงุฑ
  final testNotification = AdminNotificationModel(
    id: DateTime.now().millisecondsSinceEpoch.toString(),
    title: 'ุงุฎุชุจุงุฑ ุงูุญูุธ',
    body: 'ูุฐุง ุฅุดุนุงุฑ ูุงุฎุชุจุงุฑ ุนูููุฉ ุงูุญูุธ ูุงูุชุญููู',
    data: {'test': 'save_load'},
    timestamp: DateTime.now(),
    isRead: false,
    type: 'system',
    priority: NotificationPriority.normal,
  );
  
  print('๐ค ูุญุงูุงุฉ ุญูุธ ุฅุดุนุงุฑ: ${testNotification.title}');
  
  // ุงุฎุชุจุงุฑ ุชุญููู JSON
  final json = testNotification.toJson();
  final fromJson = AdminNotificationModel.fromJson(json);
  
  assert(testNotification.id == fromJson.id, 'ูุดู ูู ุชุญููู JSON');
  assert(testNotification.title == fromJson.title, 'ูุดู ูู ุชุญููู ุงูุนููุงู');
  assert(testNotification.priority == fromJson.priority, 'ูุดู ูู ุชุญููู ุงูุฃููููุฉ');
  
  print('โ ูุฌุญ ุงุฎุชุจุงุฑ ุชุญููู JSON');
  
  // ุงุฎุชุจุงุฑ ุชุญููู Map
  final map = testNotification.toMap();
  final fromMap = AdminNotificationModel.fromMap(map);
  
  assert(testNotification.id == fromMap.id, 'ูุดู ูู ุชุญููู Map');
  print('โ ูุฌุญ ุงุฎุชุจุงุฑ ุชุญููู Map');
}

/// ุงุฎุชุจุงุฑ ุงูุนูููุงุช
Future<void> _testOperations(AdminNotificationService service) async {
  print('โ๏ธ ุงุฎุชุจุงุฑ ุงูุนูููุงุช...');
  
  // ุงุฎุชุจุงุฑ copyWith
  final originalNotification = AdminNotificationModel(
    id: 'test_copy',
    title: 'ุฅุดุนุงุฑ ุฃุตูู',
    body: 'ูุญุชูู ุฃุตูู',
    data: {},
    timestamp: DateTime.now(),
    isRead: false,
    type: 'general',
    priority: NotificationPriority.normal,
  );
  
  final copiedNotification = originalNotification.copyWith(
    isRead: true,
    priority: NotificationPriority.high,
  );
  
  assert(copiedNotification.id == originalNotification.id, 'ูุดู ูู copyWith - ID');
  assert(copiedNotification.title == originalNotification.title, 'ูุดู ูู copyWith - Title');
  assert(copiedNotification.isRead == true, 'ูุดู ูู copyWith - isRead');
  assert(copiedNotification.priority == NotificationPriority.high, 'ูุดู ูู copyWith - priority');
  
  print('โ ูุฌุญ ุงุฎุชุจุงุฑ copyWith');
  
  // ุงุฎุชุจุงุฑ ุงูููุงุฑูุฉ
  final notification1 = AdminNotificationModel(
    id: 'same_id',
    title: 'ุฅุดุนุงุฑ 1',
    body: 'ูุญุชูู 1',
    data: {},
    timestamp: DateTime.now(),
    isRead: false,
    type: 'general',
    priority: NotificationPriority.normal,
  );
  
  final notification2 = AdminNotificationModel(
    id: 'same_id',
    title: 'ุฅุดุนุงุฑ 2',
    body: 'ูุญุชูู 2',
    data: {},
    timestamp: DateTime.now(),
    isRead: true,
    type: 'student',
    priority: NotificationPriority.high,
  );
  
  assert(notification1 == notification2, 'ูุดู ูู ุงูููุงุฑูุฉ - ููุณ ID');
  assert(notification1.hashCode == notification2.hashCode, 'ูุดู ูู hashCode');
  
  print('โ ูุฌุญ ุงุฎุชุจุงุฑ ุงูููุงุฑูุฉ');
  
  // ุงุฎุชุจุงุฑ ุงูุฃููููุงุช
  final priorities = [
    NotificationPriority.low,
    NotificationPriority.normal,
    NotificationPriority.high,
    NotificationPriority.urgent,
  ];
  
  for (final priority in priorities) {
    final notification = AdminNotificationModel(
      id: 'priority_test',
      title: 'ุงุฎุชุจุงุฑ ุงูุฃููููุฉ',
      body: 'ุงุฎุชุจุงุฑ',
      data: {},
      timestamp: DateTime.now(),
      isRead: false,
      type: 'general',
      priority: priority,
    );
    
    print('   - ${notification.priorityText}: ${notification.priorityColor}');
  }
  
  print('โ ูุฌุญ ุงุฎุชุจุงุฑ ุงูุฃููููุงุช');
  
  // ุงุฎุชุจุงุฑ ุงูุฃููุงุน
  final types = ['student', 'bus', 'complaint', 'emergency', 'system', 'backup', 'general'];
  
  for (final type in types) {
    final notification = AdminNotificationModel(
      id: 'type_test',
      title: 'ุงุฎุชุจุงุฑ ุงูููุน',
      body: 'ุงุฎุชุจุงุฑ',
      data: {},
      timestamp: DateTime.now(),
      isRead: false,
      type: type,
      priority: NotificationPriority.normal,
    );
    
    print('   - ${notification.typeDescription}: ${notification.typeIcon}');
  }
  
  print('โ ูุฌุญ ุงุฎุชุจุงุฑ ุงูุฃููุงุน');
}

/// ุงุฎุชุจุงุฑ ุงูุฃุฏุงุก
Future<void> _testPerformance() async {
  print('๐ ุงุฎุชุจุงุฑ ุงูุฃุฏุงุก...');
  
  final stopwatch = Stopwatch()..start();
  
  // ุฅูุดุงุก 1000 ุฅุดุนุงุฑ
  final notifications = <AdminNotificationModel>[];
  for (int i = 0; i < 1000; i++) {
    notifications.add(AdminNotificationModel(
      id: 'perf_test_$i',
      title: 'ุฅุดุนุงุฑ ุฑูู $i',
      body: 'ูุญุชูู ุงูุฅุดุนุงุฑ ุฑูู $i',
      data: {'index': i.toString()},
      timestamp: DateTime.now().subtract(Duration(minutes: i)),
      isRead: i % 2 == 0,
      type: ['general', 'student', 'bus', 'emergency'][i % 4],
      priority: NotificationPriority.values[i % 4],
    ));
  }
  
  stopwatch.stop();
  print('โฑ๏ธ ุฅูุดุงุก 1000 ุฅุดุนุงุฑ: ${stopwatch.elapsedMilliseconds}ms');
  
  // ุงุฎุชุจุงุฑ ุชุญููู JSON
  stopwatch.reset();
  stopwatch.start();
  
  final jsonList = notifications.map((n) => n.toJson()).toList();
  
  stopwatch.stop();
  print('โฑ๏ธ ุชุญููู 1000 ุฅุดุนุงุฑ ุฅูู JSON: ${stopwatch.elapsedMilliseconds}ms');
  
  // ุงุฎุชุจุงุฑ ุงุณุชุฑุฌุงุน ูู JSON
  stopwatch.reset();
  stopwatch.start();
  
  final fromJsonList = jsonList.map((json) => AdminNotificationModel.fromJson(json)).toList();
  
  stopwatch.stop();
  print('โฑ๏ธ ุงุณุชุฑุฌุงุน 1000 ุฅุดุนุงุฑ ูู JSON: ${stopwatch.elapsedMilliseconds}ms');
  
  assert(fromJsonList.length == notifications.length, 'ูุดู ูู ุงุฎุชุจุงุฑ ุงูุฃุฏุงุก');
  print('โ ูุฌุญ ุงุฎุชุจุงุฑ ุงูุฃุฏุงุก');
}
