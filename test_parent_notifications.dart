import 'package:flutter/material.dart';
import 'lib/services/parent_notification_service.dart';
import 'lib/models/parent_notification_model.dart';

/// ุงุฎุชุจุงุฑ ูุธุงู ุฅุดุนุงุฑุงุช ููู ุงูุฃูุฑ
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  print('๐งช ุจุฏุก ุงุฎุชุจุงุฑ ูุธุงู ุฅุดุนุงุฑุงุช ููู ุงูุฃูุฑ...');
  
  final parentNotificationService = ParentNotificationService();
  
  try {
    // ุงุฎุชุจุงุฑ ุฅูุดุงุก ุฅุดุนุงุฑุงุช ุชุฌุฑูุจูุฉ
    await _testCreateParentNotifications(parentNotificationService);
    
    // ุงุฎุชุจุงุฑ ุงูุญูุธ ูุงูุชุญููู
    await _testSaveAndLoad(parentNotificationService);
    
    // ุงุฎุชุจุงุฑ ุงูุนูููุงุช
    await _testOperations(parentNotificationService);
    
    // ุงุฎุชุจุงุฑ ุงูุฃููุงุน ุงููุฎุชููุฉ
    await _testNotificationTypes();
    
    print('โ ุชู ุงุฌุชูุงุฒ ุฌููุน ุงุฎุชุจุงุฑุงุช ูุธุงู ุฅุดุนุงุฑุงุช ููู ุงูุฃูุฑ!');
    
  } catch (e) {
    print('โ ูุดู ูู ุงุฎุชุจุงุฑ ูุธุงู ุฅุดุนุงุฑุงุช ููู ุงูุฃูุฑ: $e');
  }
}

/// ุงุฎุชุจุงุฑ ุฅูุดุงุก ุฅุดุนุงุฑุงุช ุชุฌุฑูุจูุฉ ูููู ุงูุฃูุฑ
Future<void> _testCreateParentNotifications(ParentNotificationService service) async {
  print('๐ ุงุฎุชุจุงุฑ ุฅูุดุงุก ุฅุดุนุงุฑุงุช ููู ุงูุฃูุฑ...');
  
  // ุฅุดุนุงุฑ ุฑููุจ ุงูุทุงูุจ
  final pickupNotification = ParentNotificationModel(
    id: '1',
    title: 'ุฑููุจ ุงูุทุงูุจ',
    body: 'ุชู ุฑููุจ ุทููู ุฃุญูุฏ ูู ุงูุญุงููุฉ ุฑูู 123',
    data: {
      'type': 'student_pickup',
      'studentName': 'ุฃุญูุฏ ูุญูุฏ',
      'busNumber': '123',
      'location': 'ูุญุทุฉ ุงูุญู ุงูุฃูู',
    },
    timestamp: DateTime.now(),
    isRead: false,
    type: 'student_pickup',
    priority: ParentNotificationPriority.normal,
    studentId: 'student_123',
    busId: 'bus_123',
  );
  
  // ุฅุดุนุงุฑ ุชุฃุฎูุฑ ุงูุญุงููุฉ
  final delayNotification = ParentNotificationModel(
    id: '2',
    title: 'ุชุฃุฎูุฑ ุงูุญุงููุฉ',
    body: 'ุชุฃุฎุฑุช ุงูุญุงููุฉ ุฑูู 123 ููุฏุฉ 15 ุฏูููุฉ ุจุณุจุจ ุงูุงุฒุฏุญุงู',
    data: {
      'type': 'bus_delay',
      'busNumber': '123',
      'delayMinutes': '15',
      'reason': 'ุงุฒุฏุญุงู ูุฑูุฑู',
    },
    timestamp: DateTime.now(),
    isRead: false,
    type: 'bus_delay',
    priority: ParentNotificationPriority.high,
    busId: 'bus_123',
  );
  
  // ุฅุดุนุงุฑ ุทูุงุฑุฆ
  final emergencyNotification = ParentNotificationModel(
    id: '3',
    title: 'ุญุงูุฉ ุทูุงุฑุฆ',
    body: 'ูุฑุฌู ุงูุชูุงุตู ูุน ุฅุฏุงุฑุฉ ุงููุฏุฑุณุฉ ููุฑุงู',
    data: {
      'type': 'emergency',
      'studentName': 'ุฃุญูุฏ ูุญูุฏ',
      'contactNumber': '0501234567',
    },
    timestamp: DateTime.now(),
    isRead: false,
    type: 'emergency',
    priority: ParentNotificationPriority.urgent,
    studentId: 'student_123',
  );
  
  print('โ ุชู ุฅูุดุงุก ${[pickupNotification, delayNotification, emergencyNotification].length} ุฅุดุนุงุฑุงุช ุชุฌุฑูุจูุฉ');
  
  // ุงุฎุชุจุงุฑ ุงูุฎุตุงุฆุต
  print('๐ ุงุฎุชุจุงุฑ ุฎุตุงุฆุต ุงูุฅุดุนุงุฑุงุช:');
  print('   - ุฅุดุนุงุฑ ุงูุฑููุจ: ${pickupNotification.typeDescription} ${pickupNotification.typeIcon}');
  print('   - ุฅุดุนุงุฑ ุงูุชุฃุฎูุฑ: ${delayNotification.priorityText} (${delayNotification.priorityColor})');
  print('   - ุฅุดุนุงุฑ ุงูุทูุงุฑุฆ: ${emergencyNotification.requiresAction ? 'ูุชุทูุจ ุฅุฌุฑุงุก' : 'ูุง ูุชุทูุจ ุฅุฌุฑุงุก'}');
  print('   - ุงูููุช ุงูููุณู: ${pickupNotification.formattedTime}');
  print('   - ูู ุฌุฏูุฏุ ${pickupNotification.isNew}');
}

/// ุงุฎุชุจุงุฑ ุงูุญูุธ ูุงูุชุญููู
Future<void> _testSaveAndLoad(ParentNotificationService service) async {
  print('๐พ ุงุฎุชุจุงุฑ ุงูุญูุธ ูุงูุชุญููู...');
  
  // ูุญุงูุงุฉ ุญูุธ ุฅุดุนุงุฑ
  final testNotification = ParentNotificationModel(
    id: DateTime.now().millisecondsSinceEpoch.toString(),
    title: 'ุงุฎุชุจุงุฑ ุงูุญูุธ',
    body: 'ูุฐุง ุฅุดุนุงุฑ ูุงุฎุชุจุงุฑ ุนูููุฉ ุงูุญูุธ ูุงูุชุญููู',
    data: {'test': 'save_load'},
    timestamp: DateTime.now(),
    isRead: false,
    type: 'student_behavior',
    priority: ParentNotificationPriority.normal,
    studentId: 'test_student',
  );
  
  print('๐ค ูุญุงูุงุฉ ุญูุธ ุฅุดุนุงุฑ: ${testNotification.title}');
  
  // ุงุฎุชุจุงุฑ ุชุญููู JSON
  final json = testNotification.toJson();
  final fromJson = ParentNotificationModel.fromJson(json);
  
  assert(testNotification.id == fromJson.id, 'ูุดู ูู ุชุญููู JSON');
  assert(testNotification.title == fromJson.title, 'ูุดู ูู ุชุญููู ุงูุนููุงู');
  assert(testNotification.priority == fromJson.priority, 'ูุดู ูู ุชุญููู ุงูุฃููููุฉ');
  assert(testNotification.studentId == fromJson.studentId, 'ูุดู ูู ุชุญููู ูุนุฑู ุงูุทุงูุจ');
  
  print('โ ูุฌุญ ุงุฎุชุจุงุฑ ุชุญููู JSON');
  
  // ุงุฎุชุจุงุฑ ุชุญููู Map
  final map = testNotification.toMap();
  final fromMap = ParentNotificationModel.fromMap(map);
  
  assert(testNotification.id == fromMap.id, 'ูุดู ูู ุชุญููู Map');
  print('โ ูุฌุญ ุงุฎุชุจุงุฑ ุชุญููู Map');
}

/// ุงุฎุชุจุงุฑ ุงูุนูููุงุช
Future<void> _testOperations(ParentNotificationService service) async {
  print('โ๏ธ ุงุฎุชุจุงุฑ ุงูุนูููุงุช...');
  
  // ุงุฎุชุจุงุฑ copyWith
  final originalNotification = ParentNotificationModel(
    id: 'test_copy',
    title: 'ุฅุดุนุงุฑ ุฃุตูู',
    body: 'ูุญุชูู ุฃุตูู',
    data: {},
    timestamp: DateTime.now(),
    isRead: false,
    type: 'general',
    priority: ParentNotificationPriority.normal,
  );
  
  final copiedNotification = originalNotification.copyWith(
    isRead: true,
    priority: ParentNotificationPriority.high,
    studentId: 'new_student_id',
  );
  
  assert(copiedNotification.id == originalNotification.id, 'ูุดู ูู copyWith - ID');
  assert(copiedNotification.title == originalNotification.title, 'ูุดู ูู copyWith - Title');
  assert(copiedNotification.isRead == true, 'ูุดู ูู copyWith - isRead');
  assert(copiedNotification.priority == ParentNotificationPriority.high, 'ูุดู ูู copyWith - priority');
  assert(copiedNotification.studentId == 'new_student_id', 'ูุดู ูู copyWith - studentId');
  
  print('โ ูุฌุญ ุงุฎุชุจุงุฑ copyWith');
  
  // ุงุฎุชุจุงุฑ ุงูููุงุฑูุฉ
  final notification1 = ParentNotificationModel(
    id: 'same_id',
    title: 'ุฅุดุนุงุฑ 1',
    body: 'ูุญุชูู 1',
    data: {},
    timestamp: DateTime.now(),
    isRead: false,
    type: 'general',
    priority: ParentNotificationPriority.normal,
  );
  
  final notification2 = ParentNotificationModel(
    id: 'same_id',
    title: 'ุฅุดุนุงุฑ 2',
    body: 'ูุญุชูู 2',
    data: {},
    timestamp: DateTime.now(),
    isRead: true,
    type: 'student_pickup',
    priority: ParentNotificationPriority.high,
  );
  
  assert(notification1 == notification2, 'ูุดู ูู ุงูููุงุฑูุฉ - ููุณ ID');
  assert(notification1.hashCode == notification2.hashCode, 'ูุดู ูู hashCode');
  
  print('โ ูุฌุญ ุงุฎุชุจุงุฑ ุงูููุงุฑูุฉ');
}

/// ุงุฎุชุจุงุฑ ุฃููุงุน ุงูุฅุดุนุงุฑุงุช ุงููุฎุชููุฉ
Future<void> _testNotificationTypes() async {
  print('๐ฏ ุงุฎุชุจุงุฑ ุฃููุงุน ุงูุฅุดุนุงุฑุงุช...');
  
  final types = [
    'student_pickup',
    'student_dropoff', 
    'student_absence',
    'student_behavior',
    'bus_delay',
    'bus_breakdown',
    'emergency',
    'announcement',
    'payment',
    'survey',
    'general',
  ];
  
  for (final type in types) {
    final notification = ParentNotificationModel(
      id: 'type_test_$type',
      title: 'ุงุฎุชุจุงุฑ ุงูููุน',
      body: 'ุงุฎุชุจุงุฑ ููุน ุงูุฅุดุนุงุฑ',
      data: {'type': type},
      timestamp: DateTime.now(),
      isRead: false,
      type: type,
      priority: ParentNotificationPriority.normal,
    );
    
    print('   - ${notification.typeDescription}: ${notification.typeIcon}');
    print('     ูุชุทูุจ ุฅุฌุฑุงุก: ${notification.requiresAction}');
    if (notification.requiresAction) {
      print('     ูุต ุงูุฅุฌุฑุงุก: ${notification.actionText}');
    }
  }
  
  print('โ ูุฌุญ ุงุฎุชุจุงุฑ ุฃููุงุน ุงูุฅุดุนุงุฑุงุช');
  
  // ุงุฎุชุจุงุฑ ุงูุฃููููุงุช
  print('๐จ ุงุฎุชุจุงุฑ ุงูุฃููููุงุช...');
  final priorities = ParentNotificationPriority.values;
  
  for (final priority in priorities) {
    final notification = ParentNotificationModel(
      id: 'priority_test',
      title: 'ุงุฎุชุจุงุฑ ุงูุฃููููุฉ',
      body: 'ุงุฎุชุจุงุฑ',
      data: {},
      timestamp: DateTime.now(),
      isRead: false,
      type: 'general',
      priority: priority,
    );
    
    print('   - ${notification.priorityText}: ${notification.priorityColor}');
  }
  
  print('โ ูุฌุญ ุงุฎุชุจุงุฑ ุงูุฃููููุงุช');
}

/// ุงุฎุชุจุงุฑ ุงูุฎุตุงุฆุต ุงููุชูุฏูุฉ
Future<void> _testAdvancedFeatures() async {
  print('๐ ุงุฎุชุจุงุฑ ุงูุฎุตุงุฆุต ุงููุชูุฏูุฉ...');
  
  // ุฅุดุนุงุฑ ูุน ุจูุงูุงุช ุทุงูุจ
  final studentNotification = ParentNotificationModel(
    id: 'student_test',
    title: 'ุฅุดุนุงุฑ ุทุงูุจ',
    body: 'ุฅุดุนุงุฑ ูุชุนูู ุจุงูุทุงูุจ',
    data: {
      'studentName': 'ุฃุญูุฏ ูุญูุฏ',
      'busNumber': 'ุญุงููุฉ 123',
      'location': 'ุงููุฏุฑุณุฉ ุงูุงุจุชุฏุงุฆูุฉ',
    },
    timestamp: DateTime.now(),
    isRead: false,
    type: 'student_pickup',
    priority: ParentNotificationPriority.normal,
    studentId: 'student_123',
    busId: 'bus_123',
  );
  
  print('๐จโ๐ ุงุฎุชุจุงุฑ ุงูุฅุดุนุงุฑ ุงููุชุนูู ุจุงูุทุงูุจ:');
  print('   - ุงุณู ุงูุทุงูุจ: ${studentNotification.studentName}');
  print('   - ุฑูู ุงูุญุงููุฉ: ${studentNotification.busNumber}');
  print('   - ุงููููุน: ${studentNotification.location}');
  print('   - ูุชุนูู ุจุทุงูุจ: ${studentNotification.isStudentRelated}');
  print('   - ูุชุนูู ุจุญุงููุฉ: ${studentNotification.isBusRelated}');
  
  // ุงุฎุชุจุงุฑ ุงูููุช
  final oldNotification = ParentNotificationModel(
    id: 'old_test',
    title: 'ุฅุดุนุงุฑ ูุฏูู',
    body: 'ุฅุดุนุงุฑ ูู ุงูุฃูุณ',
    data: {},
    timestamp: DateTime.now().subtract(const Duration(days: 1)),
    isRead: true,
    type: 'general',
    priority: ParentNotificationPriority.low,
  );
  
  print('โฐ ุงุฎุชุจุงุฑ ุชูุณูู ุงูููุช:');
  print('   - ุงูุฅุดุนุงุฑ ุงูุฌุฏูุฏ: ${studentNotification.formattedTime}');
  print('   - ุงูุฅุดุนุงุฑ ุงููุฏูู: ${oldNotification.formattedTime}');
  print('   - ูู ุงูุฌุฏูุฏ ุฌุฏูุฏุ ${studentNotification.isNew}');
  print('   - ูู ุงููุฏูู ุฌุฏูุฏุ ${oldNotification.isNew}');
  
  print('โ ูุฌุญ ุงุฎุชุจุงุฑ ุงูุฎุตุงุฆุต ุงููุชูุฏูุฉ');
}
